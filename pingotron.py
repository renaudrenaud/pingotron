"""
Horrible code to ping IP addresses and write the result it in a table

1 - DATABASE
  please provide env variables for database connection:

  export PG_IP="192.168.1.120"
  export PG_PORT="5432"
  export PG_USER="postgresUSER"
  export PG_PASSWORD="postgresPW"
  export PG_DB="postgres"
  export HOSTNAME1="72.28.128.211"
  export HOSTNAME2="92.168.196.58"

2 - DATABASE TABLE

Ping results are stored in a table with the following columns as created by the :


CREATE TABLE public.ping_history(
	id_ping int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	date_time timestamptz NULL,
	from_ip varchar(20) NULL,
	to_ip varchar(20) NULL,
	ping_result numeric(2) NULL
);	 
	
3 - Grafana is used to display the results
    Database is queried with the following query:

    select
    case when (
		  select  count(*)   	
		  from ping_history ph
		  where now() - date_time  < '00:01:30'
		  ) = 0
		  then -100   --'ERROR PING : Zero PING since 90 seconds!'
	  when (select ping_result from ping_history ph
			order by date_time desc limit 1
			) = 1
		  then 100 -- 'PING OK'
	  else 
	 	  0 -- 'ERROR PING NOK'
	  end as ping 
  
RC 2020-12-01
v0.1
  - first version : insert ping result in database for a list of hostnames

"""


import os
from time import sleep
from datetime import datetime
from datetime import timezone
from pg import Postgres

class Pingotron:
    def __init__(self):
        self.__version__ = '0.1'
        # get env variables
        self.IP_HOSTS = []
        self.PG_URL = os.environ.get('PG_URL','192.168.1.120')
        self.PG_PORT = os.environ.get('PG_PORT','5432')
        self.PG_USER = os.environ.get('PG_PORT','postgres')
        self.PG_PASSWORD = os.environ.get('PG_PASSWORD','postgres')
        self.PG_DB = os.environ.get('PG_DB','postgres')

        self.pg = Postgres(os.environ['PG_IP'], os.environ['PG_PORT'], os.environ['PG_DB'], os.environ['PG_USER'], os.environ['PG_PASSWORD'])
        
        # GRAB the list of IP we want to check
        # User can define up to 100 IP in the env variable
        # with HOSTNAME0 to HOSTNAME99
        for i in range(100):
            try:
                self.IP_HOSTS.append(os.environ['HOSTNAME' + str(i)])
            except:
                if i > 0:
                    break

        self.nodename = os.uname().nodename
                

    def ping(self, host):
        response = os.system("ping -c 1 " + host)
        if response == 0:
            return 1
        else:
            return 0

    def run(self):
        # ping the list of IP we want to check
        
        try:
            for host in self.IP_HOSTS:
                ping_result = self.ping(host)
                self.pg.connect()
                req = "INSERT INTO public.ping_history (date_time, from_ip, to_ip, ping_result)"
                req = req + "VALUES('" + datetime.now().strftime("%Y-%m-%d %H:%M:%S") + "', " 
                req = req + "'" + self.nodename + "', " 
                req = req + "'" + str(host) + "', " 
                req = req + str(ping_result) + ");"
                print(req)
                self.pg.execute(req)
        except Exception as e:
            print(e)
            
        
    
if __name__ == "__main__":
    p = Pingotron()
    while True:
        p.run()
        sleep(60)
    

"""
myPingotron = Pingotron()
myPingotron.run()


hostname = "172.28.128.211" #example
response = os.system("ping -c 1 " + hostname)

#and then check the response...
if response == 0:
    print(hostname + ' is up!')
else:
    print(hostname + ' is down!')

myPG = Postgres('192.168.1.120', '5432', 'postgres', 'postgres', 'Renaud1965*')


while True:
    # An horrible way to do it
    response = os.system("ping -c 1 " + hostname)
    if response == 0:
        print(hostname + ' is up!')
        response = 1
    else:
        print(hostname + ' is down!')
        response = 0

    req = "INSERT INTO public.ping_history (date_time, from_ip, to_ip, ping_result)"
    req = req + "VALUES('" + datetime.now().strftime("%Y-%m-%d %H:%M:%S") + "', " 
    req = req + "'" + os.uname().nodename + "', " 
    req = req + "'" + str(hostname) + "', " + str(response) + ");"
    print(req)
    
    myPG.connect()
    myPG.execute(req)
    myPG.close()

    sleep(20)

"""    